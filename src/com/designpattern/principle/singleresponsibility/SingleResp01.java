package com.designpattern.principle.singleresponsibility;

/**
 * Created by swaggyW
 * on 2021/12/3 14:31
 *
 * 设计模式原则：
 * ===============================================================================
 * 单一职责原则： 如果一个类P，负责两个职责A1和A2，由于职责A1需要修改，修改之后导致A2无法正常使用。
 * 这样就会破坏设计模式的单一职责原则。很多职责都耦合在一起。
 * 定义： 一个类只负责一个职责。
 * ===============================================================================
 *
 * 以一个场景为例子。
 * 对于汽车、自行车、摩托车，在公路上行驶。。。。
 * 此时我们运行程序得到的输出结果如下
 * =======================================
 *       汽车在公路上行驶                   ||
 *      自行车在公路上行驶                  ||
 *      摩托车在公路上行驶                  ||
 *  ======================================
 * 这个时候是没有问题的，但是如果此时用户输入的是飞机，又或者是轮船呢？
 */
public class SingleResp01 {
    public void main(String[] args) {
        Vehicle vehicle = new Vehicle();
        vehicle.run("汽车");
        vehicle.run("自行车");
        vehicle.run("摩托车");

        /* ==================*/
        vehicle.run("飞机");
        vehicle.run("轮船");
        /* print => 飞机在公路上行驶， 轮船在公路上行驶 */
        /**
         * 此时是有问题的，有生活常识的人都知道，飞机是在天上飞的，轮船是在水里的、
         * 所以不符合单一职责原则
         * 为了保证单一职责原则，分别创建不同的类来实现不同的方式
         * {@SingleResp02}
         */
    }


}

/**
 * 该类是交通工具类
 */
class Vehicle {

    /**
     * 输入交通工具，就可以在公路上行驶
     * @param vehicle
     */
    public void run(String vehicle) {
        System.out.println(vehicle + "在公路上行驶...");
    }

}
